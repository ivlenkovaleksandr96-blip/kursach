// lib/views/add_edit_note_screen.dart

import 'package:flutter/material.dart';
// –í–æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
import 'package:provider/provider.dart';
import '../models/note_model.dart';
import '../viewmodels/notes_viewmodel.dart';

class AddEditNoteScreen extends StatefulWidget {
  final Note? note;

  const AddEditNoteScreen({super.key, this.note});

  @override
  State<AddEditNoteScreen> createState() => _AddEditNoteScreenState();
}

class _AddEditNoteScreenState extends State<AddEditNoteScreen> {
  final _formKey = GlobalKey<FormState>();
  late String _title;
  late String _content;
  late String _mood;
  final List<String> _moods = ['üòä', 'üò¢', 'üò†', 'üòê', 'üòç'];
  bool _isSaving = false; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π

  @override
  void initState() {
    super.initState();
    _title = widget.note?.title ?? '';
    _content = widget.note?.content ?? '';
    _mood = widget.note?.mood ?? _moods.first;
  }

  // –°–¥–µ–ª–∞–ª–∏ –º–µ—Ç–æ–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –∏ –¥–æ–±–∞–≤–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  Future<void> _saveNote() async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if (_isSaving) return;

    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();

      setState(() {
        _isSaving = true; // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      });

      final viewModel = Provider.of<NotesViewModel>(context, listen: false);

      final newNote = Note(
        id: widget.note?.id,
        title: _title,
        content: _content,
        mood: _mood,
        createdAt: widget.note?.createdAt ?? DateTime.now(),
      );

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º `await`, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (widget.note == null) {
        await viewModel.addNote(newNote);
      } else {
        await viewModel.updateNote(newNote);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–∂–µ—Ç –≤—Å–µ –µ—â–µ –≤ –¥–µ—Ä–µ–≤–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–∑—ã–≤–∞—Ç—å Navigator
      if (mounted) {
        Navigator.of(context).pop();
      }
    }
  }

  // –°–¥–µ–ª–∞–ª–∏ –º–µ—Ç–æ–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
  Future<void> _deleteNote() async {
    if (widget.note != null) {
      final viewModel = Provider.of<NotesViewModel>(context, listen: false);
      // –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
      await viewModel.deleteNote(widget.note!.id!);

      if (mounted) {
        Navigator.of(context).pop();
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.note == null ? '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'),
        actions: [
          if (widget.note != null)
            IconButton(
              icon: const Icon(Icons.delete),
              onPressed: _deleteNote, // –í—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            ),
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
          if (_isSaving)
            const Padding(
              padding: EdgeInsets.all(16.0),
              child: SizedBox(
                  width: 24,
                  height: 24,
                  child: CircularProgressIndicator(color: Colors.white)),
            )
          else
            IconButton(
              icon: const Icon(Icons.save),
              onPressed: _saveNote, // –í—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                initialValue: _title,
                decoration: const InputDecoration(
                  labelText: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
                  border: OutlineInputBorder(),
                ),
                validator: (value) =>
                value!.isEmpty ? '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' : null,
                onSaved: (value) => _title = value!,
              ),
              const SizedBox(height: 20),
              const Text('–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:', style: TextStyle(fontSize: 16)),
              Wrap(
                spacing: 8.0,
                children: _moods.map((mood) {
                  return ChoiceChip(
                    label: Text(mood, style: const TextStyle(fontSize: 24)),
                    selected: _mood == mood,
                    onSelected: (selected) {
                      setState(() {
                        if (selected) {
                          _mood = mood;
                        }
                      });
                    },
                  );
                }).toList(),
              ),
              const SizedBox(height: 20),
              TextFormField(
                initialValue: _content,
                decoration: const InputDecoration(
                  labelText: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ',
                  alignLabelWithHint: true,
                  border: OutlineInputBorder(),
                ),
                maxLines: 10,
                validator: (value) =>
                value!.isEmpty ? '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' : null,
                onSaved: (value) => _content = value!,
              ),
            ],
          ),
        ),
      ),
    );
  }
}
